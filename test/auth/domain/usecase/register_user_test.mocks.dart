// Mocks generated by Mockito 5.0.13 from annotations
// in tasky/test/auth/domain/usecase/register_user_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tasky/auth/domain/entity/user_entity.dart' as _i6;
import 'package:tasky/auth/domain/repository/auth_repository.dart' as _i3;
import 'package:tasky/core/error/failures.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Either<_i4.Failure, bool> checkUserAuthenticated() =>
      (super.noSuchMethod(Invocation.method(#checkUserAuthenticated, []),
              returnValue: _FakeEither<_i4.Failure, bool>())
          as _i2.Either<_i4.Failure, bool>);
  @override
  _i5.Future<_i2.Either<_i4.Failure, _i6.UserEntity>> registerUser(
          {String? name, String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(#registerUser, [],
              {#name: name, #email: email, #password: password}),
          returnValue: Future<_i2.Either<_i4.Failure, _i6.UserEntity>>.value(
              _FakeEither<_i4.Failure, _i6.UserEntity>())) as _i5
          .Future<_i2.Either<_i4.Failure, _i6.UserEntity>>);
  @override
  _i5.Future<_i2.Either<_i4.Failure, _i6.UserEntity>> signInUser(
          {String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(
              #signInUser, [], {#email: email, #password: password}),
          returnValue: Future<_i2.Either<_i4.Failure, _i6.UserEntity>>.value(
              _FakeEither<_i4.Failure, _i6.UserEntity>())) as _i5
          .Future<_i2.Either<_i4.Failure, _i6.UserEntity>>);
  @override
  _i5.Future<_i2.Either<_i4.Failure, _i6.UserEntity>> googleSignIn() =>
      (super.noSuchMethod(Invocation.method(#googleSignIn, []),
          returnValue: Future<_i2.Either<_i4.Failure, _i6.UserEntity>>.value(
              _FakeEither<_i4.Failure, _i6.UserEntity>())) as _i5
          .Future<_i2.Either<_i4.Failure, _i6.UserEntity>>);
  @override
  _i5.Future<_i2.Either<_i4.Failure, bool>> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
              returnValue: Future<_i2.Either<_i4.Failure, bool>>.value(
                  _FakeEither<_i4.Failure, bool>()))
          as _i5.Future<_i2.Either<_i4.Failure, bool>>);
  @override
  String toString() => super.toString();
}
